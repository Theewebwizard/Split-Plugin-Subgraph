// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
  Int8,
} from "@graphprotocol/graph-ts";

export class SplitConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SplitConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SplitConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SplitConfig", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SplitConfig | null {
    return changetype<SplitConfig | null>(
      store.get_in_block("SplitConfig", id),
    );
  }

  static load(id: string): SplitConfig | null {
    return changetype<SplitConfig | null>(store.get("SplitConfig", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): Bytes {
    let value = this.get("dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set dao(value: Bytes) {
    this.set("dao", Value.fromBytes(value));
  }

  get plugin(): Bytes {
    let value = this.get("plugin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set plugin(value: Bytes) {
    this.set("plugin", Value.fromBytes(value));
  }

  get configId(): Bytes {
    let value = this.get("configId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set configId(value: Bytes) {
    this.set("configId", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get splitAddresses(): Array<Bytes> {
    let value = this.get("splitAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set splitAddresses(value: Array<Bytes>) {
    this.set("splitAddresses", Value.fromBytesArray(value));
  }

  get percentages(): Array<BigInt> {
    let value = this.get("percentages");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set percentages(value: Array<BigInt>) {
    this.set("percentages", Value.fromBigIntArray(value));
  }

  get minTokenAmount(): BigInt {
    let value = this.get("minTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minTokenAmount(value: BigInt) {
    this.set("minTokenAmount", Value.fromBigInt(value));
  }

  get automated(): boolean {
    let value = this.get("automated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set automated(value: boolean) {
    this.set("automated", Value.fromBoolean(value));
  }

  get isSplitEnabled(): boolean {
    let value = this.get("isSplitEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isSplitEnabled(value: boolean) {
    this.set("isSplitEnabled", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get executions(): SplitExecutionLoader {
    return new SplitExecutionLoader(
      "SplitConfig",
      this.get("id")!.toString(),
      "executions",
    );
  }

  get failures(): SplitFailureLoader {
    return new SplitFailureLoader(
      "SplitConfig",
      this.get("id")!.toString(),
      "failures",
    );
  }
}

export class SplitExecution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SplitExecution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SplitExecution must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SplitExecution", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SplitExecution | null {
    return changetype<SplitExecution | null>(
      store.get_in_block("SplitExecution", id),
    );
  }

  static load(id: string): SplitExecution | null {
    return changetype<SplitExecution | null>(store.get("SplitExecution", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): Bytes {
    let value = this.get("dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set dao(value: Bytes) {
    this.set("dao", Value.fromBytes(value));
  }

  get plugin(): Bytes {
    let value = this.get("plugin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set plugin(value: Bytes) {
    this.set("plugin", Value.fromBytes(value));
  }

  get configId(): Bytes {
    let value = this.get("configId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set configId(value: Bytes) {
    this.set("configId", Value.fromBytes(value));
  }

  get config(): string {
    let value = this.get("config");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config(value: string) {
    this.set("config", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get recipients(): Array<Bytes> {
    let value = this.get("recipients");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set recipients(value: Array<Bytes>) {
    this.set("recipients", Value.fromBytesArray(value));
  }

  get amounts(): Array<BigInt> {
    let value = this.get("amounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set amounts(value: Array<BigInt>) {
    this.set("amounts", Value.fromBigIntArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class SplitFailure extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SplitFailure entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SplitFailure must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SplitFailure", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SplitFailure | null {
    return changetype<SplitFailure | null>(
      store.get_in_block("SplitFailure", id),
    );
  }

  static load(id: string): SplitFailure | null {
    return changetype<SplitFailure | null>(store.get("SplitFailure", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): Bytes {
    let value = this.get("dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set dao(value: Bytes) {
    this.set("dao", Value.fromBytes(value));
  }

  get plugin(): Bytes {
    let value = this.get("plugin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set plugin(value: Bytes) {
    this.set("plugin", Value.fromBytes(value));
  }

  get configId(): Bytes {
    let value = this.get("configId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set configId(value: Bytes) {
    this.set("configId", Value.fromBytes(value));
  }

  get config(): string {
    let value = this.get("config");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config(value: string) {
    this.set("config", Value.fromString(value));
  }

  get reason(): Bytes {
    let value = this.get("reason");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set reason(value: Bytes) {
    this.set("reason", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class AutomationSetting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AutomationSetting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AutomationSetting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AutomationSetting", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AutomationSetting | null {
    return changetype<AutomationSetting | null>(
      store.get_in_block("AutomationSetting", id),
    );
  }

  static load(id: string): AutomationSetting | null {
    return changetype<AutomationSetting | null>(
      store.get("AutomationSetting", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dao(): Bytes {
    let value = this.get("dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set dao(value: Bytes) {
    this.set("dao", Value.fromBytes(value));
  }

  get plugin(): Bytes {
    let value = this.get("plugin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set plugin(value: Bytes) {
    this.set("plugin", Value.fromBytes(value));
  }

  get configId(): Bytes {
    let value = this.get("configId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set configId(value: Bytes) {
    this.set("configId", Value.fromBytes(value));
  }

  get automated(): boolean {
    let value = this.get("automated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set automated(value: boolean) {
    this.set("automated", Value.fromBoolean(value));
  }
}

export class SplitExecutionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SplitExecution[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SplitExecution[]>(value);
  }
}

export class SplitFailureLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SplitFailure[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SplitFailure[]>(value);
  }
}
