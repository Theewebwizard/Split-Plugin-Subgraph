// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AutomationSwitched extends ethereum.Event {
  get params(): AutomationSwitched__Params {
    return new AutomationSwitched__Params(this);
  }
}

export class AutomationSwitched__Params {
  _event: AutomationSwitched;

  constructor(event: AutomationSwitched) {
    this._event = event;
  }

  get configIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get currentState(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SplitConfigCreated extends ethereum.Event {
  get params(): SplitConfigCreated__Params {
    return new SplitConfigCreated__Params(this);
  }
}

export class SplitConfigCreated__Params {
  _event: SplitConfigCreated;

  constructor(event: SplitConfigCreated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get configIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SplitConfigDeleted extends ethereum.Event {
  get params(): SplitConfigDeleted__Params {
    return new SplitConfigDeleted__Params(this);
  }
}

export class SplitConfigDeleted__Params {
  _event: SplitConfigDeleted;

  constructor(event: SplitConfigDeleted) {
    this._event = event;
  }

  get configIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SplitConfigFailed extends ethereum.Event {
  get params(): SplitConfigFailed__Params {
    return new SplitConfigFailed__Params(this);
  }
}

export class SplitConfigFailed__Params {
  _event: SplitConfigFailed;

  constructor(event: SplitConfigFailed) {
    this._event = event;
  }

  get configIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get err(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class SplitExecuted extends ethereum.Event {
  get params(): SplitExecuted__Params {
    return new SplitExecuted__Params(this);
  }
}

export class SplitExecuted__Params {
  _event: SplitExecuted;

  constructor(event: SplitExecuted) {
    this._event = event;
  }

  get configIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SplitPlugin__preUserOpValidationHookInputUserOpStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get initCode(): Bytes {
    return this[2].toBytes();
  }

  get callData(): Bytes {
    return this[3].toBytes();
  }

  get callGasLimit(): BigInt {
    return this[4].toBigInt();
  }

  get verificationGasLimit(): BigInt {
    return this[5].toBigInt();
  }

  get preVerificationGas(): BigInt {
    return this[6].toBigInt();
  }

  get maxFeePerGas(): BigInt {
    return this[7].toBigInt();
  }

  get maxPriorityFeePerGas(): BigInt {
    return this[8].toBigInt();
  }

  get paymasterAndData(): Bytes {
    return this[9].toBytes();
  }

  get signature(): Bytes {
    return this[10].toBytes();
  }
}

export class SplitPlugin__getSplitConfigResult {
  value0: Address;
  value1: Array<Address>;
  value2: Array<BigInt>;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: Address,
    value1: Array<Address>,
    value2: Array<BigInt>,
    value3: BigInt,
    value4: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getTokenAddress(): Address {
    return this.value0;
  }

  getSplitAddresses(): Array<Address> {
    return this.value1;
  }

  getPercentages(): Array<BigInt> {
    return this.value2;
  }

  getMinTokenAmount(): BigInt {
    return this.value3;
  }

  getIsSplitEnabled(): boolean {
    return this.value4;
  }
}

export class SplitPlugin__pluginManifestResultManifestStruct extends ethereum.Tuple {
  get interfaceIds(): Array<Bytes> {
    return this[0].toBytesArray();
  }

  get dependencyInterfaceIds(): Array<Bytes> {
    return this[1].toBytesArray();
  }

  get executionFunctions(): Array<Bytes> {
    return this[2].toBytesArray();
  }

  get permittedExecutionSelectors(): Array<Bytes> {
    return this[3].toBytesArray();
  }

  get permitAnyExternalAddress(): boolean {
    return this[4].toBoolean();
  }

  get canSpendNativeToken(): boolean {
    return this[5].toBoolean();
  }

  get permittedExternalCalls(): Array<SplitPlugin__pluginManifestResultManifestPermittedExternalCallsStruct> {
    return this[6].toTupleArray<SplitPlugin__pluginManifestResultManifestPermittedExternalCallsStruct>();
  }

  get userOpValidationFunctions(): Array<SplitPlugin__pluginManifestResultManifestUserOpValidationFunctionsStruct> {
    return this[7].toTupleArray<SplitPlugin__pluginManifestResultManifestUserOpValidationFunctionsStruct>();
  }

  get runtimeValidationFunctions(): Array<SplitPlugin__pluginManifestResultManifestRuntimeValidationFunctionsStruct> {
    return this[8].toTupleArray<SplitPlugin__pluginManifestResultManifestRuntimeValidationFunctionsStruct>();
  }

  get preUserOpValidationHooks(): Array<SplitPlugin__pluginManifestResultManifestPreUserOpValidationHooksStruct> {
    return this[9].toTupleArray<SplitPlugin__pluginManifestResultManifestPreUserOpValidationHooksStruct>();
  }

  get preRuntimeValidationHooks(): Array<SplitPlugin__pluginManifestResultManifestPreRuntimeValidationHooksStruct> {
    return this[10].toTupleArray<SplitPlugin__pluginManifestResultManifestPreRuntimeValidationHooksStruct>();
  }

  get executionHooks(): Array<SplitPlugin__pluginManifestResultManifestExecutionHooksStruct> {
    return this[11].toTupleArray<SplitPlugin__pluginManifestResultManifestExecutionHooksStruct>();
  }
}

export class SplitPlugin__pluginManifestResultManifestPermittedExternalCallsStruct extends ethereum.Tuple {
  get externalAddress(): Address {
    return this[0].toAddress();
  }

  get permitAnySelector(): boolean {
    return this[1].toBoolean();
  }

  get selectors(): Array<Bytes> {
    return this[2].toBytesArray();
  }
}

export class SplitPlugin__pluginManifestResultManifestUserOpValidationFunctionsStruct extends ethereum.Tuple {
  get executionSelector(): Bytes {
    return this[0].toBytes();
  }

  get associatedFunction(): SplitPlugin__pluginManifestResultManifestUserOpValidationFunctionsAssociatedFunctionStruct {
    return changetype<SplitPlugin__pluginManifestResultManifestUserOpValidationFunctionsAssociatedFunctionStruct>(
      this[1].toTuple(),
    );
  }
}

export class SplitPlugin__pluginManifestResultManifestUserOpValidationFunctionsAssociatedFunctionStruct extends ethereum.Tuple {
  get functionType(): i32 {
    return this[0].toI32();
  }

  get functionId(): i32 {
    return this[1].toI32();
  }

  get dependencyIndex(): BigInt {
    return this[2].toBigInt();
  }
}

export class SplitPlugin__pluginManifestResultManifestRuntimeValidationFunctionsStruct extends ethereum.Tuple {
  get executionSelector(): Bytes {
    return this[0].toBytes();
  }

  get associatedFunction(): SplitPlugin__pluginManifestResultManifestRuntimeValidationFunctionsAssociatedFunctionStruct {
    return changetype<SplitPlugin__pluginManifestResultManifestRuntimeValidationFunctionsAssociatedFunctionStruct>(
      this[1].toTuple(),
    );
  }
}

export class SplitPlugin__pluginManifestResultManifestRuntimeValidationFunctionsAssociatedFunctionStruct extends ethereum.Tuple {
  get functionType(): i32 {
    return this[0].toI32();
  }

  get functionId(): i32 {
    return this[1].toI32();
  }

  get dependencyIndex(): BigInt {
    return this[2].toBigInt();
  }
}

export class SplitPlugin__pluginManifestResultManifestPreUserOpValidationHooksStruct extends ethereum.Tuple {
  get executionSelector(): Bytes {
    return this[0].toBytes();
  }

  get associatedFunction(): SplitPlugin__pluginManifestResultManifestPreUserOpValidationHooksAssociatedFunctionStruct {
    return changetype<SplitPlugin__pluginManifestResultManifestPreUserOpValidationHooksAssociatedFunctionStruct>(
      this[1].toTuple(),
    );
  }
}

export class SplitPlugin__pluginManifestResultManifestPreUserOpValidationHooksAssociatedFunctionStruct extends ethereum.Tuple {
  get functionType(): i32 {
    return this[0].toI32();
  }

  get functionId(): i32 {
    return this[1].toI32();
  }

  get dependencyIndex(): BigInt {
    return this[2].toBigInt();
  }
}

export class SplitPlugin__pluginManifestResultManifestPreRuntimeValidationHooksStruct extends ethereum.Tuple {
  get executionSelector(): Bytes {
    return this[0].toBytes();
  }

  get associatedFunction(): SplitPlugin__pluginManifestResultManifestPreRuntimeValidationHooksAssociatedFunctionStruct {
    return changetype<SplitPlugin__pluginManifestResultManifestPreRuntimeValidationHooksAssociatedFunctionStruct>(
      this[1].toTuple(),
    );
  }
}

export class SplitPlugin__pluginManifestResultManifestPreRuntimeValidationHooksAssociatedFunctionStruct extends ethereum.Tuple {
  get functionType(): i32 {
    return this[0].toI32();
  }

  get functionId(): i32 {
    return this[1].toI32();
  }

  get dependencyIndex(): BigInt {
    return this[2].toBigInt();
  }
}

export class SplitPlugin__pluginManifestResultManifestExecutionHooksStruct extends ethereum.Tuple {
  get executionSelector(): Bytes {
    return this[0].toBytes();
  }

  get preExecHook(): SplitPlugin__pluginManifestResultManifestExecutionHooksPreExecHookStruct {
    return changetype<SplitPlugin__pluginManifestResultManifestExecutionHooksPreExecHookStruct>(
      this[1].toTuple(),
    );
  }

  get postExecHook(): SplitPlugin__pluginManifestResultManifestExecutionHooksPostExecHookStruct {
    return changetype<SplitPlugin__pluginManifestResultManifestExecutionHooksPostExecHookStruct>(
      this[2].toTuple(),
    );
  }
}

export class SplitPlugin__pluginManifestResultManifestExecutionHooksPreExecHookStruct extends ethereum.Tuple {
  get functionType(): i32 {
    return this[0].toI32();
  }

  get functionId(): i32 {
    return this[1].toI32();
  }

  get dependencyIndex(): BigInt {
    return this[2].toBigInt();
  }
}

export class SplitPlugin__pluginManifestResultManifestExecutionHooksPostExecHookStruct extends ethereum.Tuple {
  get functionType(): i32 {
    return this[0].toI32();
  }

  get functionId(): i32 {
    return this[1].toI32();
  }

  get dependencyIndex(): BigInt {
    return this[2].toBigInt();
  }
}

export class SplitPlugin__pluginMetadataResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get version(): string {
    return this[1].toString();
  }

  get author(): string {
    return this[2].toString();
  }

  get permissionDescriptors(): Array<SplitPlugin__pluginMetadataResultValue0PermissionDescriptorsStruct> {
    return this[3].toTupleArray<SplitPlugin__pluginMetadataResultValue0PermissionDescriptorsStruct>();
  }
}

export class SplitPlugin__pluginMetadataResultValue0PermissionDescriptorsStruct extends ethereum.Tuple {
  get functionSelector(): Bytes {
    return this[0].toBytes();
  }

  get permissionDescription(): string {
    return this[1].toString();
  }
}

export class SplitPlugin__splitConfigsResult {
  value0: Address;
  value1: BigInt;
  value2: boolean;

  constructor(value0: Address, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getTokenAddress(): Address {
    return this.value0;
  }

  getMinTokenAmount(): BigInt {
    return this.value1;
  }

  getIsSplitEnabled(): boolean {
    return this.value2;
  }
}

export class SplitPlugin__userOpValidationFunctionInputParam1Struct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get initCode(): Bytes {
    return this[2].toBytes();
  }

  get callData(): Bytes {
    return this[3].toBytes();
  }

  get callGasLimit(): BigInt {
    return this[4].toBigInt();
  }

  get verificationGasLimit(): BigInt {
    return this[5].toBigInt();
  }

  get preVerificationGas(): BigInt {
    return this[6].toBigInt();
  }

  get maxFeePerGas(): BigInt {
    return this[7].toBigInt();
  }

  get maxPriorityFeePerGas(): BigInt {
    return this[8].toBigInt();
  }

  get paymasterAndData(): Bytes {
    return this[9].toBytes();
  }

  get signature(): Bytes {
    return this[10].toBytes();
  }
}

export class SplitPlugin extends ethereum.SmartContract {
  static bind(address: Address): SplitPlugin {
    return new SplitPlugin("SplitPlugin", address);
  }

  preExecutionHook(
    functionId: i32,
    sender: Address,
    value: BigInt,
    data: Bytes,
  ): Bytes {
    let result = super.call(
      "preExecutionHook",
      "preExecutionHook(uint8,address,uint256,bytes):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(functionId)),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
      ],
    );

    return result[0].toBytes();
  }

  try_preExecutionHook(
    functionId: i32,
    sender: Address,
    value: BigInt,
    data: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "preExecutionHook",
      "preExecutionHook(uint8,address,uint256,bytes):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(functionId)),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  preUserOpValidationHook(
    functionId: i32,
    userOp: SplitPlugin__preUserOpValidationHookInputUserOpStruct,
    userOpHash: Bytes,
  ): BigInt {
    let result = super.call(
      "preUserOpValidationHook",
      "preUserOpValidationHook(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(functionId)),
        ethereum.Value.fromTuple(userOp),
        ethereum.Value.fromFixedBytes(userOpHash),
      ],
    );

    return result[0].toBigInt();
  }

  try_preUserOpValidationHook(
    functionId: i32,
    userOp: SplitPlugin__preUserOpValidationHookInputUserOpStruct,
    userOpHash: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "preUserOpValidationHook",
      "preUserOpValidationHook(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(functionId)),
        ethereum.Value.fromTuple(userOp),
        ethereum.Value.fromFixedBytes(userOpHash),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  AUTHOR(): string {
    let result = super.call("AUTHOR", "AUTHOR():(string)", []);

    return result[0].toString();
  }

  try_AUTHOR(): ethereum.CallResult<string> {
    let result = super.tryCall("AUTHOR", "AUTHOR():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getSplitConfig(_configIndex: BigInt): SplitPlugin__getSplitConfigResult {
    let result = super.call(
      "getSplitConfig",
      "getSplitConfig(uint256):(address,address[],uint32[],uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_configIndex)],
    );

    return new SplitPlugin__getSplitConfigResult(
      result[0].toAddress(),
      result[1].toAddressArray(),
      result[2].toBigIntArray(),
      result[3].toBigInt(),
      result[4].toBoolean(),
    );
  }

  try_getSplitConfig(
    _configIndex: BigInt,
  ): ethereum.CallResult<SplitPlugin__getSplitConfigResult> {
    let result = super.tryCall(
      "getSplitConfig",
      "getSplitConfig(uint256):(address,address[],uint32[],uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_configIndex)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SplitPlugin__getSplitConfigResult(
        value[0].toAddress(),
        value[1].toAddressArray(),
        value[2].toBigIntArray(),
        value[3].toBigInt(),
        value[4].toBoolean(),
      ),
    );
  }

  getSplitIndexes(_user: Address): Array<BigInt> {
    let result = super.call(
      "getSplitIndexes",
      "getSplitIndexes(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigIntArray();
  }

  try_getSplitIndexes(_user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getSplitIndexes",
      "getSplitIndexes(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isSplitCreator(_configIndex: BigInt, _splitCreator: Address): boolean {
    let result = super.call(
      "isSplitCreator",
      "isSplitCreator(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_configIndex),
        ethereum.Value.fromAddress(_splitCreator),
      ],
    );

    return result[0].toBoolean();
  }

  try_isSplitCreator(
    _configIndex: BigInt,
    _splitCreator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSplitCreator",
      "isSplitCreator(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_configIndex),
        ethereum.Value.fromAddress(_splitCreator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  pluginManifest(): SplitPlugin__pluginManifestResultManifestStruct {
    let result = super.call(
      "pluginManifest",
      "pluginManifest():((bytes4[],bytes4[],bytes4[],bytes4[],bool,bool,(address,bool,bytes4[])[],(bytes4,(uint8,uint8,uint256))[],(bytes4,(uint8,uint8,uint256))[],(bytes4,(uint8,uint8,uint256))[],(bytes4,(uint8,uint8,uint256))[],(bytes4,(uint8,uint8,uint256),(uint8,uint8,uint256))[]))",
      [],
    );

    return changetype<SplitPlugin__pluginManifestResultManifestStruct>(
      result[0].toTuple(),
    );
  }

  try_pluginManifest(): ethereum.CallResult<SplitPlugin__pluginManifestResultManifestStruct> {
    let result = super.tryCall(
      "pluginManifest",
      "pluginManifest():((bytes4[],bytes4[],bytes4[],bytes4[],bool,bool,(address,bool,bytes4[])[],(bytes4,(uint8,uint8,uint256))[],(bytes4,(uint8,uint8,uint256))[],(bytes4,(uint8,uint8,uint256))[],(bytes4,(uint8,uint8,uint256))[],(bytes4,(uint8,uint8,uint256),(uint8,uint8,uint256))[]))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SplitPlugin__pluginManifestResultManifestStruct>(
        value[0].toTuple(),
      ),
    );
  }

  pluginMetadata(): SplitPlugin__pluginMetadataResultValue0Struct {
    let result = super.call(
      "pluginMetadata",
      "pluginMetadata():((string,string,string,(bytes4,string)[]))",
      [],
    );

    return changetype<SplitPlugin__pluginMetadataResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_pluginMetadata(): ethereum.CallResult<SplitPlugin__pluginMetadataResultValue0Struct> {
    let result = super.tryCall(
      "pluginMetadata",
      "pluginMetadata():((string,string,string,(bytes4,string)[]))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SplitPlugin__pluginMetadataResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  splitConfigCount(): BigInt {
    let result = super.call(
      "splitConfigCount",
      "splitConfigCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_splitConfigCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "splitConfigCount",
      "splitConfigCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  splitConfigIndexes(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "splitConfigIndexes",
      "splitConfigIndexes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_splitConfigIndexes(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "splitConfigIndexes",
      "splitConfigIndexes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  splitConfigs(param0: BigInt): SplitPlugin__splitConfigsResult {
    let result = super.call(
      "splitConfigs",
      "splitConfigs(uint256):(address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new SplitPlugin__splitConfigsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBoolean(),
    );
  }

  try_splitConfigs(
    param0: BigInt,
  ): ethereum.CallResult<SplitPlugin__splitConfigsResult> {
    let result = super.tryCall(
      "splitConfigs",
      "splitConfigs(uint256):(address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SplitPlugin__splitConfigsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBoolean(),
      ),
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userOpValidationFunction(
    param0: i32,
    param1: SplitPlugin__userOpValidationFunctionInputParam1Struct,
    param2: Bytes,
  ): BigInt {
    let result = super.call(
      "userOpValidationFunction",
      "userOpValidationFunction(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromFixedBytes(param2),
      ],
    );

    return result[0].toBigInt();
  }

  try_userOpValidationFunction(
    param0: i32,
    param1: SplitPlugin__userOpValidationFunctionInputParam1Struct,
    param2: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userOpValidationFunction",
      "userOpValidationFunction(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromTuple(param1),
        ethereum.Value.fromFixedBytes(param2),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class CreateSplitCall extends ethereum.Call {
  get inputs(): CreateSplitCall__Inputs {
    return new CreateSplitCall__Inputs(this);
  }

  get outputs(): CreateSplitCall__Outputs {
    return new CreateSplitCall__Outputs(this);
  }
}

export class CreateSplitCall__Inputs {
  _call: CreateSplitCall;

  constructor(call: CreateSplitCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _splitAddresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _percentages(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class CreateSplitCall__Outputs {
  _call: CreateSplitCall;

  constructor(call: CreateSplitCall) {
    this._call = call;
  }
}

export class DeleteSplitConfigCall extends ethereum.Call {
  get inputs(): DeleteSplitConfigCall__Inputs {
    return new DeleteSplitConfigCall__Inputs(this);
  }

  get outputs(): DeleteSplitConfigCall__Outputs {
    return new DeleteSplitConfigCall__Outputs(this);
  }
}

export class DeleteSplitConfigCall__Inputs {
  _call: DeleteSplitConfigCall;

  constructor(call: DeleteSplitConfigCall) {
    this._call = call;
  }

  get _configIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteSplitConfigCall__Outputs {
  _call: DeleteSplitConfigCall;

  constructor(call: DeleteSplitConfigCall) {
    this._call = call;
  }
}

export class OnInstallCall extends ethereum.Call {
  get inputs(): OnInstallCall__Inputs {
    return new OnInstallCall__Inputs(this);
  }

  get outputs(): OnInstallCall__Outputs {
    return new OnInstallCall__Outputs(this);
  }
}

export class OnInstallCall__Inputs {
  _call: OnInstallCall;

  constructor(call: OnInstallCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class OnInstallCall__Outputs {
  _call: OnInstallCall;

  constructor(call: OnInstallCall) {
    this._call = call;
  }
}

export class OnUninstallCall extends ethereum.Call {
  get inputs(): OnUninstallCall__Inputs {
    return new OnUninstallCall__Inputs(this);
  }

  get outputs(): OnUninstallCall__Outputs {
    return new OnUninstallCall__Outputs(this);
  }
}

export class OnUninstallCall__Inputs {
  _call: OnUninstallCall;

  constructor(call: OnUninstallCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class OnUninstallCall__Outputs {
  _call: OnUninstallCall;

  constructor(call: OnUninstallCall) {
    this._call = call;
  }
}

export class PostExecutionHookCall extends ethereum.Call {
  get inputs(): PostExecutionHookCall__Inputs {
    return new PostExecutionHookCall__Inputs(this);
  }

  get outputs(): PostExecutionHookCall__Outputs {
    return new PostExecutionHookCall__Outputs(this);
  }
}

export class PostExecutionHookCall__Inputs {
  _call: PostExecutionHookCall;

  constructor(call: PostExecutionHookCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get value1(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PostExecutionHookCall__Outputs {
  _call: PostExecutionHookCall;

  constructor(call: PostExecutionHookCall) {
    this._call = call;
  }
}

export class PreExecutionHookCall extends ethereum.Call {
  get inputs(): PreExecutionHookCall__Inputs {
    return new PreExecutionHookCall__Inputs(this);
  }

  get outputs(): PreExecutionHookCall__Outputs {
    return new PreExecutionHookCall__Outputs(this);
  }
}

export class PreExecutionHookCall__Inputs {
  _call: PreExecutionHookCall;

  constructor(call: PreExecutionHookCall) {
    this._call = call;
  }

  get functionId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class PreExecutionHookCall__Outputs {
  _call: PreExecutionHookCall;

  constructor(call: PreExecutionHookCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PreRuntimeValidationHookCall extends ethereum.Call {
  get inputs(): PreRuntimeValidationHookCall__Inputs {
    return new PreRuntimeValidationHookCall__Inputs(this);
  }

  get outputs(): PreRuntimeValidationHookCall__Outputs {
    return new PreRuntimeValidationHookCall__Outputs(this);
  }
}

export class PreRuntimeValidationHookCall__Inputs {
  _call: PreRuntimeValidationHookCall;

  constructor(call: PreRuntimeValidationHookCall) {
    this._call = call;
  }

  get functionId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class PreRuntimeValidationHookCall__Outputs {
  _call: PreRuntimeValidationHookCall;

  constructor(call: PreRuntimeValidationHookCall) {
    this._call = call;
  }
}

export class PreUserOpValidationHookCall extends ethereum.Call {
  get inputs(): PreUserOpValidationHookCall__Inputs {
    return new PreUserOpValidationHookCall__Inputs(this);
  }

  get outputs(): PreUserOpValidationHookCall__Outputs {
    return new PreUserOpValidationHookCall__Outputs(this);
  }
}

export class PreUserOpValidationHookCall__Inputs {
  _call: PreUserOpValidationHookCall;

  constructor(call: PreUserOpValidationHookCall) {
    this._call = call;
  }

  get functionId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get userOp(): PreUserOpValidationHookCallUserOpStruct {
    return changetype<PreUserOpValidationHookCallUserOpStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get userOpHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class PreUserOpValidationHookCall__Outputs {
  _call: PreUserOpValidationHookCall;

  constructor(call: PreUserOpValidationHookCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PreUserOpValidationHookCallUserOpStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get initCode(): Bytes {
    return this[2].toBytes();
  }

  get callData(): Bytes {
    return this[3].toBytes();
  }

  get callGasLimit(): BigInt {
    return this[4].toBigInt();
  }

  get verificationGasLimit(): BigInt {
    return this[5].toBigInt();
  }

  get preVerificationGas(): BigInt {
    return this[6].toBigInt();
  }

  get maxFeePerGas(): BigInt {
    return this[7].toBigInt();
  }

  get maxPriorityFeePerGas(): BigInt {
    return this[8].toBigInt();
  }

  get paymasterAndData(): Bytes {
    return this[9].toBytes();
  }

  get signature(): Bytes {
    return this[10].toBytes();
  }
}

export class RuntimeValidationFunctionCall extends ethereum.Call {
  get inputs(): RuntimeValidationFunctionCall__Inputs {
    return new RuntimeValidationFunctionCall__Inputs(this);
  }

  get outputs(): RuntimeValidationFunctionCall__Outputs {
    return new RuntimeValidationFunctionCall__Outputs(this);
  }
}

export class RuntimeValidationFunctionCall__Inputs {
  _call: RuntimeValidationFunctionCall;

  constructor(call: RuntimeValidationFunctionCall) {
    this._call = call;
  }

  get functionId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class RuntimeValidationFunctionCall__Outputs {
  _call: RuntimeValidationFunctionCall;

  constructor(call: RuntimeValidationFunctionCall) {
    this._call = call;
  }
}

export class SplitCall extends ethereum.Call {
  get inputs(): SplitCall__Inputs {
    return new SplitCall__Inputs(this);
  }

  get outputs(): SplitCall__Outputs {
    return new SplitCall__Outputs(this);
  }
}

export class SplitCall__Inputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }

  get _configIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SplitCall__Outputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }
}

export class SplitExternalCall extends ethereum.Call {
  get inputs(): SplitExternalCall__Inputs {
    return new SplitExternalCall__Inputs(this);
  }

  get outputs(): SplitExternalCall__Outputs {
    return new SplitExternalCall__Outputs(this);
  }
}

export class SplitExternalCall__Inputs {
  _call: SplitExternalCall;

  constructor(call: SplitExternalCall) {
    this._call = call;
  }

  get configIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get executor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SplitExternalCall__Outputs {
  _call: SplitExternalCall;

  constructor(call: SplitExternalCall) {
    this._call = call;
  }
}

export class ToggleIsSplitEnabledCall extends ethereum.Call {
  get inputs(): ToggleIsSplitEnabledCall__Inputs {
    return new ToggleIsSplitEnabledCall__Inputs(this);
  }

  get outputs(): ToggleIsSplitEnabledCall__Outputs {
    return new ToggleIsSplitEnabledCall__Outputs(this);
  }
}

export class ToggleIsSplitEnabledCall__Inputs {
  _call: ToggleIsSplitEnabledCall;

  constructor(call: ToggleIsSplitEnabledCall) {
    this._call = call;
  }

  get _configIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ToggleIsSplitEnabledCall__Outputs {
  _call: ToggleIsSplitEnabledCall;

  constructor(call: ToggleIsSplitEnabledCall) {
    this._call = call;
  }
}

export class UpdateSplitConfigCall extends ethereum.Call {
  get inputs(): UpdateSplitConfigCall__Inputs {
    return new UpdateSplitConfigCall__Inputs(this);
  }

  get outputs(): UpdateSplitConfigCall__Outputs {
    return new UpdateSplitConfigCall__Outputs(this);
  }
}

export class UpdateSplitConfigCall__Inputs {
  _call: UpdateSplitConfigCall;

  constructor(call: UpdateSplitConfigCall) {
    this._call = call;
  }

  get _configIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _splitAddresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _percentages(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdateSplitConfigCall__Outputs {
  _call: UpdateSplitConfigCall;

  constructor(call: UpdateSplitConfigCall) {
    this._call = call;
  }
}
